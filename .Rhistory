#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
}
return(result)
}
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
Shieh.CI <- function(Group.1, Group.2,conf.level,alternative="two.sided")
{
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/
result <- c(delta.1, delta.2)
} else if (alternative == "greater"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "greater", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1, delta.2)
} else if (alternative == "less"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "less", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
}
return(result)
}
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
Group.2 <- rnorm(12)
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
Group.1 <- rnorm(10)
Group.2 <- rnorm(12)
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/
result <- c(delta.1, delta.2)
}
alternative="two.sided"
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/
result <- c(delta.1, delta.2)
}
conf.level=.90
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/
result <- c(delta.1, delta.2)
} else if (alternative == "greater"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "greater", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1, delta.2)
}
delta.2 <- +Inf
delta.2
result <- c(delta.1, delta.2)
result
#' Function to compute CI around Glass's effect size estimators
#'
#' @param Group.1 a (non-empty) numeric vector of data values.
#' @param Group.2 a (non-empty) numeric vector of data values.
#' @param conf.level confidence level of the interval
#' @param unbiased a logical variable indicating whether to compute the biased or unbiased estimator.
#' If TRUE, unbiased estimator is computed (Hedges' g or Hedges' g'). Otherwise, bias estimator is computed (Cohen's d or Cohen's d').
#' @param alternative a character string specifying the alternative hypothesis, must be one of "two.sided" (default), "greater" or "less".
#' @param na.rm set whether Missing Values should be excluded (na.rm = TRUE) or not (na.rm = FALSE) - defaults to TRUE.
#'
#' @export datashieh.CI
#'
#' @keywords Cohen's effect sizes, confidence interval
#' @return Returns Cohen's estimators of effect size and (1-alpha)% confidence interval around it, standard error
#' @importFrom stats na.omit sd pt uniroot
datashieh.CI <- function(Group.1,Group.2,conf.level,unbiased, alternative,na.rm) UseMethod("datashieh.CI")
datashieh.CIEst <- function(Group.1,
Group.2,
conf.level=.95,
unbiased=TRUE,
alternative="two.sided",
na.rm=TRUE){
if (na.rm == TRUE ) {
Group.1 <- na.omit(Group.1)
Group.2 <- na.omit(Group.2)
} else {
Group.1 <- Group.1
Group.2 <- Group.2
}
if(inherits(Group.1,c("numeric","integer")) == FALSE |inherits(Group.2,c("numeric","integer")) == FALSE)
stop("Data are neither numeric nor integer")
n1 <- length(Group.1)
n2 <- length(Group.2)
N <- n1+n2
m1 <- mean(Group.1)
m2 <- mean(Group.2)
sd1 <- sd(Group.1)
sd2 <- sd(Group.2)
q1 <- n1/N
q2 <- n2/N
shieh.d <- (m1-m2)/sqrt(sd1^2/q1+sd2^2/q2)
df <- ((sd1^2/n1+sd2^2/n2)^2)/((sd1^2/n1)^2/(n1-1)+(sd2^2/n2)^2/(n2-1))
w_obs <- (m1-m2)/sqrt(sd1^2/n1+sd2^2/n2)
if(unbiased==TRUE){
corr <- gamma(df/2)/(sqrt(df/2)*gamma((df-1)/2))
} else {corr <- 1}
if(alternative=="two.sided"){
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=df, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(N)
# ncp_welch <- shieh*sqrt(N)
# <--> shieh <- ncp_welch/sqrt(N)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=df, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(N)
result <- c(delta.1*corr, delta.2*corr)
} else if (alternative == "greater"){
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=df, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(N)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1*corr, delta.2)
} else if (alternative == "less"){
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=df, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(N)
result <- c(delta.1, delta.2*corr)
}
# print results
meth <- "Confidence interval around the raw mean difference"
# Return results in list()
invisible(
list(shieh.d = shieh.d,
conf.level = conf.level,
CI = result)
)
}
# Adding a default method in defining a function called datashieh.CI.default
datashieh.CI.default <- function(
Group.1,
Group.2,
conf.level=.95,
unbiased=TRUE,
alternative="two.sided",
na.rm=TRUE){
out <- datashieh.CIEst(Group.1,Group.2,conf.level,unbiased,alternative,na.rm)
out$shieh.d <- out$shieh.d
out$call <- match.call()
out$CI <- out$CI
out$conf.level <- out$conf.level
class(out) <- "datashieh.CI"
out
}
print.datacohen.CI <- function(x,...){
cat("Call:\n")
print(x$call)
cat("\nEffect size estimate :\n")
print(round(x$shieh.d,3))
cat(paste0("\n",x$conf.level*100," % confidence interval around effect size estimate:\n"))
print(round(x$CI,3))
}
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
datashieh.CI(Group.1,Group.2,conf.level=.90,unbiased=F, alternative="two.sided",na.rm=T)
Shieh.CI <- function(Group.1, Group.2,conf.level,alternative="two.sided")
{
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2
result <- c(delta.1, delta.2)
}
Shieh.CI <- function(Group.1, Group.2,conf.level,alternative="two.sided")
{
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2
result <- c(delta.1, delta.2)
} else if (alternative == "greater"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "greater", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1, delta.2)
} else if (alternative == "less"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "less", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
}
return(result)
}
Group.1 <- rnorm(10)
Group.2 <- rnorm(12)
Shieh.CI <- function(Group.1, Group.2,conf.level,alternative="two.sided")
{
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2
result <- c(delta.1, delta.2)
} else if (alternative == "greater"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "greater", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1, delta.2)
} else if (alternative == "less"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "less", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
}
return(result)
}
Group.1 <- rnorm(10)
Group.2 <- rnorm(12)
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
datashieh.CI(Group.1,Group.2,conf.level=.90,unbiased=F, alternative="two.sided",na.rm=T)
Shieh.CI <- function(Group.1, Group.2,conf.level,alternative="two.sided")
{
n1 <- length(Group.1)
n2 <- length(Group.2)
s1 <- sd(Group.1)
s2 <- sd(Group.2)
if(alternative=="two.sided"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "two.sided", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level)/2 = alpha/2
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=(1-conf.level)/2,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
} else if (alternative == "greater"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "greater", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) 1-pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.1 <- out$root
delta.1 <- lambda.1/sqrt(n1+n2)
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.2 <- +Inf
result <- c(delta.1, delta.2)
} else if (alternative == "less"){
#  perform two-sample Welch t-test (same assumptions of Shieh's d)
test <- t.test(Group.1, Group.2, alternative = "less", var.equal = FALSE)
w_obs <- test$statistic
#  sample estimates for degrees of freedom DF of noncentral t distribution
DF <- test$parameter
# lower limit = limit of lambda such as 1-pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
delta.1 <- -Inf
# upper limit = limit of lambda such as pt(q=t_obs, df=DF, ncp = lambda) = (1-conf.level) = alpha
# with DF = (sd1^2/n1 + sd2^2/n2)^2 / ((sd1^2/n1)^2/(n1-1) + (sd2^2/n2)^2/(n2-1))
f=function(lambda,rep) pt(q=w_obs, df=DF, ncp = lambda)-rep
out=uniroot(f,c(0,2),rep=1-conf.level,extendInt = "yes")
lambda.2 <- out$root
delta.2 <- lambda.2/sqrt(n1+n2)
result <- c(delta.1, delta.2)
}
return(result)
}
Group.1 <- rnorm(10)
Group.2 <- rnorm(12)
Shieh.CI(Group.1, Group.2,conf.level=.90,alternative="two.sided")
datashieh.CI(Group.1,Group.2,conf.level=.90,unbiased=F, alternative="two.sided",na.rm=T)
A <- rchisq(10000,df=2)
boxplot(density(A)
)
boxplot(A)
par(mfrow=c(2,1))
boxplot(A)
plot(density(A))
